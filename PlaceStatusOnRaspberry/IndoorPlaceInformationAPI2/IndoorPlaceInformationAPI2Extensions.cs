// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PlaceStatusOnRaspberry
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for IndoorPlaceInformationAPI2.
    /// </summary>
    public static partial class IndoorPlaceInformationAPI2Extensions
    {
            /// <summary>
            /// This methods is to be call from a device with sensor telling if a person
            /// pass in or put.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorId'>
            /// The iditification for the sensor (Guid format)
            /// </param>
            public static void CountingSensor(this IIndoorPlaceInformationAPI2 operations, string sensorId)
            {
                Task.Factory.StartNew(s => ((IIndoorPlaceInformationAPI2)s).CountingSensorAsync(sensorId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// This methods is to be call from a device with sensor telling if a person
            /// pass in or put.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sensorId'>
            /// The iditification for the sensor (Guid format)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CountingSensorAsync(this IIndoorPlaceInformationAPI2 operations, string sensorId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CountingSensorWithHttpMessagesAsync(sensorId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='placeId'>
            /// </param>
            public static void ResetCounter(this IIndoorPlaceInformationAPI2 operations, string placeId)
            {
                Task.Factory.StartNew(s => ((IIndoorPlaceInformationAPI2)s).ResetCounterAsync(placeId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='placeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetCounterAsync(this IIndoorPlaceInformationAPI2 operations, string placeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ResetCounterWithHttpMessagesAsync(placeId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Place> GetAllPlaces(this IIndoorPlaceInformationAPI2 operations)
            {
                return Task.Factory.StartNew(s => ((IIndoorPlaceInformationAPI2)s).GetAllPlacesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Place>> GetAllPlacesAsync(this IIndoorPlaceInformationAPI2 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPlacesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Place GetPlace(this IIndoorPlaceInformationAPI2 operations, Guid id)
            {
                return Task.Factory.StartNew(s => ((IIndoorPlaceInformationAPI2)s).GetPlaceAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Place> GetPlaceAsync(this IIndoorPlaceInformationAPI2 operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlaceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static long? GetTotalPeopleInsideByPlaceId(this IIndoorPlaceInformationAPI2 operations, Guid id)
            {
                return Task.Factory.StartNew(s => ((IIndoorPlaceInformationAPI2)s).GetTotalPeopleInsideByPlaceIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<long?> GetTotalPeopleInsideByPlaceIdAsync(this IIndoorPlaceInformationAPI2 operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTotalPeopleInsideByPlaceIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='place'>
            /// </param>
            public static void PutPlace(this IIndoorPlaceInformationAPI2 operations, Guid id, Place place)
            {
                Task.Factory.StartNew(s => ((IIndoorPlaceInformationAPI2)s).PutPlaceAsync(id, place), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='place'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutPlaceAsync(this IIndoorPlaceInformationAPI2 operations, Guid id, Place place, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutPlaceWithHttpMessagesAsync(id, place, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='place'>
            /// </param>
            public static Place PostPlace(this IIndoorPlaceInformationAPI2 operations, Place place)
            {
                return Task.Factory.StartNew(s => ((IIndoorPlaceInformationAPI2)s).PostPlaceAsync(place), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='place'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Place> PostPlaceAsync(this IIndoorPlaceInformationAPI2 operations, Place place, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostPlaceWithHttpMessagesAsync(place, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Place DeletePlace(this IIndoorPlaceInformationAPI2 operations, Guid id)
            {
                return Task.Factory.StartNew(s => ((IIndoorPlaceInformationAPI2)s).DeletePlaceAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Place> DeletePlaceAsync(this IIndoorPlaceInformationAPI2 operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePlaceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
